'use strict';

var _index = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/regenerator/index.js');

var _index2 = _interopRequireDefault(_index);

var _slicedToArray2 = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/helpers/slicedToArray.js');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _core = require('../lib/core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var readFileAsync = _bluebird2.default.promisify(_fsExtra2.default.readFile);

_ava2.default.beforeEach(function (t) {
	t.context.opts = _lodash2.default.merge({
		logger: function logger() {}
	}, _core.defaults);
});

(0, _ava2.default)('should add coords & spritePath to every image', function () {
	var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee(t) {
		var _rec = new _powerAssertRecorder(),
		    _rec2 = new _powerAssertRecorder(),
		    _rec3 = new _powerAssertRecorder();

		var cssContents, ast, images, spritesheets, opts, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

		return _index2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						_context.next = 2;
						return readFileAsync('./fixtures/basic/style.css');

					case 2:
						cssContents = _context.sent;
						ast = _postcss2.default.parse(cssContents, { from: './fixtures/basic/style.css' });
						images = void 0, spritesheets = void 0, opts = void 0;


						t.context.opts.spritePath = './build/basic';

						_context.next = 8;
						return (0, _core.extractImages)(ast, t.context.opts);

					case 8:
						_ref2 = _context.sent;
						_ref3 = (0, _slicedToArray3.default)(_ref2, 2);
						opts = _ref3[0];
						images = _ref3[1];
						_context.next = 14;
						return (0, _core.runSpritesmith)(t.context.opts, images);

					case 14:
						_ref4 = _context.sent;
						_ref5 = (0, _slicedToArray3.default)(_ref4, 3);
						opts = _ref5[0];
						images = _ref5[1];
						spritesheets = _ref5[2];
						_context.next = 21;
						return (0, _core.saveSpritesheets)(t.context.opts, images, spritesheets);

					case 21:
						_ref6 = _context.sent;
						_ref7 = (0, _slicedToArray3.default)(_ref6, 3);
						opts = _ref7[0];
						images = _ref7[1];
						spritesheets = _ref7[2];
						_context.next = 28;
						return (0, _core.mapSpritesheetProps)(t.context.opts, images, spritesheets);

					case 28:
						_ref8 = _context.sent;
						_ref9 = (0, _slicedToArray3.default)(_ref8, 3);
						opts = _ref9[0];
						images = _ref9[1];
						spritesheets = _ref9[2];


						t.deepEqual(_rec._expr(_rec._capt(_rec._capt(_rec._capt(images, 'arguments/0/object/object')[0], 'arguments/0/object').spritePath, 'arguments/0'), {
							content: 't.deepEqual(images[0].spritePath, \'build/basic/sprite.png\')',
							filepath: 'test/09-map-spritesheet-props.js',
							line: 34,
							async: true
						}), 'build/basic/sprite.png');
						t.deepEqual(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(images, 'arguments/0/object/object')[0], 'arguments/0/object').coords, 'arguments/0'), {
							content: 't.deepEqual(images[0].coords, { x: 0, y: 0, height: 25, width: 25 })',
							filepath: 'test/09-map-spritesheet-props.js',
							line: 35,
							async: true
						}), _rec3._expr(_rec3._capt({ x: 0, y: 0, height: 25, width: 25 }, 'arguments/1'), {
							content: 't.deepEqual(images[0].coords, { x: 0, y: 0, height: 25, width: 25 })',
							filepath: 'test/09-map-spritesheet-props.js',
							line: 35,
							async: true
						}));

					case 35:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, undefined);
	}));

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('should add coords & spritePath to every SVG image', function () {
	var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee2(t) {
		var _rec4 = new _powerAssertRecorder(),
		    _rec5 = new _powerAssertRecorder(),
		    _rec6 = new _powerAssertRecorder();

		var cssContents, ast, images, spritesheets, opts, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref20;

		return _index2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						_context2.next = 2;
						return readFileAsync('./fixtures/svg-basic/style.css');

					case 2:
						cssContents = _context2.sent;
						ast = _postcss2.default.parse(cssContents, { from: './fixtures/svg-basic/style.css' });
						images = void 0, spritesheets = void 0, opts = void 0;


						t.context.opts.spritePath = './build/svg-basic';

						(0, _core.prepareGroupBy)(t.context.opts);
						_context2.next = 9;
						return (0, _core.extractImages)(ast, t.context.opts);

					case 9:
						_ref11 = _context2.sent;
						_ref12 = (0, _slicedToArray3.default)(_ref11, 2);
						opts = _ref12[0];
						images = _ref12[1];
						_context2.next = 15;
						return (0, _core.applyGroupBy)(t.context.opts, images);

					case 15:
						_ref13 = _context2.sent;
						_ref14 = (0, _slicedToArray3.default)(_ref13, 2);
						opts = _ref14[0];
						images = _ref14[1];
						_context2.next = 21;
						return (0, _core.runSpritesmith)(t.context.opts, images);

					case 21:
						_ref15 = _context2.sent;
						_ref16 = (0, _slicedToArray3.default)(_ref15, 3);
						opts = _ref16[0];
						images = _ref16[1];
						spritesheets = _ref16[2];
						_context2.next = 28;
						return (0, _core.saveSpritesheets)(t.context.opts, images, spritesheets);

					case 28:
						_ref17 = _context2.sent;
						_ref18 = (0, _slicedToArray3.default)(_ref17, 3);
						opts = _ref18[0];
						images = _ref18[1];
						spritesheets = _ref18[2];
						_context2.next = 35;
						return (0, _core.mapSpritesheetProps)(t.context.opts, images, spritesheets);

					case 35:
						_ref19 = _context2.sent;
						_ref20 = (0, _slicedToArray3.default)(_ref19, 3);
						opts = _ref20[0];
						images = _ref20[1];
						spritesheets = _ref20[2];


						t.deepEqual(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(images, 'arguments/0/object/object')[0], 'arguments/0/object').spritePath, 'arguments/0'), {
							content: 't.deepEqual(images[0].spritePath, \'build/svg-basic/sprite.svg\')',
							filepath: 'test/09-map-spritesheet-props.js',
							line: 52,
							async: true
						}), 'build/svg-basic/sprite.svg');
						t.deepEqual(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(images, 'arguments/0/object/object')[0], 'arguments/0/object').coords, 'arguments/0'), {
							content: 't.deepEqual(images[0].coords, { x: 0, y: 0, height: 600, width: 600 })',
							filepath: 'test/09-map-spritesheet-props.js',
							line: 53,
							async: true
						}), _rec6._expr(_rec6._capt({ x: 0, y: 0, height: 600, width: 600 }, 'arguments/1'), {
							content: 't.deepEqual(images[0].coords, { x: 0, y: 0, height: 600, width: 600 })',
							filepath: 'test/09-map-spritesheet-props.js',
							line: 53,
							async: true
						}));

					case 42:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, undefined);
	}));

	return function (_x2) {
		return _ref10.apply(this, arguments);
	};
}());
//# sourceMappingURL=../node_modules/.cache/ava/f7392e856cfa93a6de631aaa15cd8f56.js.map