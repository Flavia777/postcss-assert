'use strict';

var _index = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/regenerator/index.js');

var _index2 = _interopRequireDefault(_index);

var _slicedToArray2 = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/helpers/slicedToArray.js');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _core = require('../lib/core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var readFileAsync = _bluebird2.default.promisify(_fsExtra2.default.readFile);

_ava2.default.beforeEach(function (t) {
	t.context.opts = _lodash2.default.merge({
		logger: function logger() {}
	}, _core.defaults);
});

(0, _ava2.default)('should update CSS declarations', function () {
	var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee(t) {
		var _rec = new _powerAssertRecorder(),
		    _rec2 = new _powerAssertRecorder();

		var input, expected, ast, images, spritesheets, opts, root, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13;

		return _index2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						_context.next = 2;
						return readFileAsync('./fixtures/basic/style.css');

					case 2:
						input = _context.sent;
						_context.next = 5;
						return readFileAsync('./expectations/basic/style.css', 'utf8');

					case 5:
						expected = _context.sent;
						ast = _postcss2.default.parse(input, { from: './fixtures/basic/style.css' });
						images = void 0, spritesheets = void 0, opts = void 0, root = void 0;


						t.context.opts.spritePath = './build/basic';
						t.context.opts.stylesheetPath = './build/basic';

						_context.next = 12;
						return (0, _core.extractImages)(ast, t.context.opts);

					case 12:
						_ref2 = _context.sent;
						_ref3 = (0, _slicedToArray3.default)(_ref2, 2);
						opts = _ref3[0];
						images = _ref3[1];
						_context.next = 18;
						return (0, _core.setTokens)(ast, t.context.opts, images);

					case 18:
						_ref4 = _context.sent;
						_ref5 = (0, _slicedToArray3.default)(_ref4, 3);
						root = _ref5[0];
						opts = _ref5[1];
						images = _ref5[2];
						_context.next = 25;
						return (0, _core.runSpritesmith)(t.context.opts, images);

					case 25:
						_ref6 = _context.sent;
						_ref7 = (0, _slicedToArray3.default)(_ref6, 3);
						opts = _ref7[0];
						images = _ref7[1];
						spritesheets = _ref7[2];
						_context.next = 32;
						return (0, _core.saveSpritesheets)(t.context.opts, images, spritesheets);

					case 32:
						_ref8 = _context.sent;
						_ref9 = (0, _slicedToArray3.default)(_ref8, 3);
						opts = _ref9[0];
						images = _ref9[1];
						spritesheets = _ref9[2];
						_context.next = 39;
						return (0, _core.mapSpritesheetProps)(t.context.opts, images, spritesheets);

					case 39:
						_ref10 = _context.sent;
						_ref11 = (0, _slicedToArray3.default)(_ref10, 3);
						opts = _ref11[0];
						images = _ref11[1];
						spritesheets = _ref11[2];
						_context.next = 46;
						return (0, _core.updateReferences)(root, t.context.opts, images, spritesheets);

					case 46:
						_ref12 = _context.sent;
						_ref13 = (0, _slicedToArray3.default)(_ref12, 4);
						root = _ref13[0];
						opts = _ref13[1];
						images = _ref13[2];
						spritesheets = _ref13[3];


						t.deepEqual(_rec._expr(_rec._capt(_rec._capt(root, 'arguments/0/callee/object').toString(), 'arguments/0'), {
							content: 't.deepEqual(root.toString(), expected)',
							filepath: 'test/10-update-references.js',
							line: 39,
							async: true
						}), _rec2._expr(_rec2._capt(expected, 'arguments/1'), {
							content: 't.deepEqual(root.toString(), expected)',
							filepath: 'test/10-update-references.js',
							line: 39,
							async: true
						}));

					case 53:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, undefined);
	}));

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('should update CSS declarations with relative paths', function () {
	var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee2(t) {
		var _rec3 = new _powerAssertRecorder(),
		    _rec4 = new _powerAssertRecorder();

		var input, expected, ast, images, spritesheets, opts, root, _ref15, _ref16, _ref17, _ref18, _ref19, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26;

		return _index2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						_context2.next = 2;
						return readFileAsync('./fixtures/relative/style.css');

					case 2:
						input = _context2.sent;
						_context2.next = 5;
						return readFileAsync('./expectations/relative/style.css', 'utf8');

					case 5:
						expected = _context2.sent;
						ast = _postcss2.default.parse(input, { from: './fixtures/relative/style.css' });
						images = void 0, spritesheets = void 0, opts = void 0, root = void 0;


						t.context.opts.spritePath = './build/relative';

						_context2.next = 11;
						return (0, _core.extractImages)(ast, t.context.opts);

					case 11:
						_ref15 = _context2.sent;
						_ref16 = (0, _slicedToArray3.default)(_ref15, 2);
						opts = _ref16[0];
						images = _ref16[1];
						_context2.next = 17;
						return (0, _core.setTokens)(ast, t.context.opts, images);

					case 17:
						_ref17 = _context2.sent;
						_ref18 = (0, _slicedToArray3.default)(_ref17, 3);
						root = _ref18[0];
						opts = _ref18[1];
						images = _ref18[2];
						_context2.next = 24;
						return (0, _core.runSpritesmith)(t.context.opts, images);

					case 24:
						_ref19 = _context2.sent;
						_ref20 = (0, _slicedToArray3.default)(_ref19, 3);
						opts = _ref20[0];
						images = _ref20[1];
						spritesheets = _ref20[2];
						_context2.next = 31;
						return (0, _core.saveSpritesheets)(t.context.opts, images, spritesheets);

					case 31:
						_ref21 = _context2.sent;
						_ref22 = (0, _slicedToArray3.default)(_ref21, 3);
						opts = _ref22[0];
						images = _ref22[1];
						spritesheets = _ref22[2];
						_context2.next = 38;
						return (0, _core.mapSpritesheetProps)(t.context.opts, images, spritesheets);

					case 38:
						_ref23 = _context2.sent;
						_ref24 = (0, _slicedToArray3.default)(_ref23, 3);
						opts = _ref24[0];
						images = _ref24[1];
						spritesheets = _ref24[2];
						_context2.next = 45;
						return (0, _core.updateReferences)(root, t.context.opts, images, spritesheets);

					case 45:
						_ref25 = _context2.sent;
						_ref26 = (0, _slicedToArray3.default)(_ref25, 4);
						root = _ref26[0];
						opts = _ref26[1];
						images = _ref26[2];
						spritesheets = _ref26[3];


						t.deepEqual(_rec3._expr(_rec3._capt(_rec3._capt(root, 'arguments/0/callee/object').toString(), 'arguments/0'), {
							content: 't.deepEqual(root.toString(), expected)',
							filepath: 'test/10-update-references.js',
							line: 57,
							async: true
						}), _rec4._expr(_rec4._capt(expected, 'arguments/1'), {
							content: 't.deepEqual(root.toString(), expected)',
							filepath: 'test/10-update-references.js',
							line: 57,
							async: true
						}));

					case 52:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, undefined);
	}));

	return function (_x2) {
		return _ref14.apply(this, arguments);
	};
}());

(0, _ava2.default)('should use function provided by onUpdateRule hook', function () {
	var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee3(t) {
		var _rec5 = new _powerAssertRecorder(),
		    _rec6 = new _powerAssertRecorder();

		var input, expected, ast, images, spritesheets, opts, root, _ref28, _ref29, _ref30, _ref31, _ref32, _ref33, _ref34, _ref35, _ref36, _ref37, _ref38, _ref39;

		return _index2.default.wrap(function _callee3$(_context3) {
			while (1) {
				switch (_context3.prev = _context3.next) {
					case 0:
						_context3.next = 2;
						return readFileAsync('./fixtures/basic/style.css');

					case 2:
						input = _context3.sent;
						_context3.next = 5;
						return readFileAsync('./expectations/basic-on-update-rule-hook/style.css', 'utf8');

					case 5:
						expected = _context3.sent;
						ast = _postcss2.default.parse(input, { from: './fixtures/basic/style.css' });
						images = void 0, spritesheets = void 0, opts = void 0, root = void 0;


						t.context.opts.spritePath = './build/basic-on-update-rule-hook';
						t.context.opts.stylesheetPath = './build/basic-on-update-rule-hook';
						t.context.opts.hooks.onUpdateRule = function (rule, commentNode, image) {
							var backgroundColorDecl = _postcss2.default.decl({
								prop: 'background-color',
								value: '#000'
							});

							(0, _core.updateRule)(rule, commentNode, image);

							rule.insertAfter(rule.last, backgroundColorDecl);
						};

						_context3.next = 13;
						return (0, _core.extractImages)(ast, t.context.opts);

					case 13:
						_ref28 = _context3.sent;
						_ref29 = (0, _slicedToArray3.default)(_ref28, 2);
						opts = _ref29[0];
						images = _ref29[1];
						_context3.next = 19;
						return (0, _core.setTokens)(ast, t.context.opts, images);

					case 19:
						_ref30 = _context3.sent;
						_ref31 = (0, _slicedToArray3.default)(_ref30, 3);
						root = _ref31[0];
						opts = _ref31[1];
						images = _ref31[2];
						_context3.next = 26;
						return (0, _core.runSpritesmith)(t.context.opts, images);

					case 26:
						_ref32 = _context3.sent;
						_ref33 = (0, _slicedToArray3.default)(_ref32, 3);
						opts = _ref33[0];
						images = _ref33[1];
						spritesheets = _ref33[2];
						_context3.next = 33;
						return (0, _core.saveSpritesheets)(t.context.opts, images, spritesheets);

					case 33:
						_ref34 = _context3.sent;
						_ref35 = (0, _slicedToArray3.default)(_ref34, 3);
						opts = _ref35[0];
						images = _ref35[1];
						spritesheets = _ref35[2];
						_context3.next = 40;
						return (0, _core.mapSpritesheetProps)(t.context.opts, images, spritesheets);

					case 40:
						_ref36 = _context3.sent;
						_ref37 = (0, _slicedToArray3.default)(_ref36, 3);
						opts = _ref37[0];
						images = _ref37[1];
						spritesheets = _ref37[2];
						_context3.next = 47;
						return (0, _core.updateReferences)(root, t.context.opts, images, spritesheets);

					case 47:
						_ref38 = _context3.sent;
						_ref39 = (0, _slicedToArray3.default)(_ref38, 4);
						root = _ref39[0];
						opts = _ref39[1];
						images = _ref39[2];
						spritesheets = _ref39[3];


						t.deepEqual(_rec5._expr(_rec5._capt(_rec5._capt(root, 'arguments/0/callee/object').toString(), 'arguments/0'), {
							content: 't.deepEqual(root.toString(), expected)',
							filepath: 'test/10-update-references.js',
							line: 86,
							async: true
						}), _rec6._expr(_rec6._capt(expected, 'arguments/1'), {
							content: 't.deepEqual(root.toString(), expected)',
							filepath: 'test/10-update-references.js',
							line: 86,
							async: true
						}));

					case 54:
					case 'end':
						return _context3.stop();
				}
			}
		}, _callee3, undefined);
	}));

	return function (_x3) {
		return _ref27.apply(this, arguments);
	};
}());
//# sourceMappingURL=../node_modules/.cache/ava/1bc15dcf5e562b6603f27a57c8831ea3.js.map