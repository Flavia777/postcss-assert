{"version":3,"sources":["07-run-spritesmith.js"],"names":["readFileAsync","Promise","promisify","fs","readFile","test","beforeEach","t","context","opts","_","merge","logger","defaults","cssContents","ast","postcss","parse","from","images","spritesheets","truthy","length","deepEqual","properties","width","height","retina","groups","indexOf"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,gBAAgBC,mBAAQC,SAAR,CAAkBC,aAAGC,QAArB,CAAtB;;AAEAC,cAAKC,UAAL,CAAgB,UAACC,CAAD,EAAO;AACtBA,GAAEC,OAAF,CAAUC,IAAV,GAAiBC,iBAAEC,KAAF,CAAQ;AAAEC,QAAF,oBAAW,CAAE;AAAb,EAAR,EAAyBC,cAAzB,CAAjB;AACA,CAFD;;AAIA,mBAAK,8BAAL;AAAA,+EAAqC,iBAAON,CAAP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACVP,cAAc,4BAAd,CADU;;AAAA;AAC9Bc,iBAD8B;AAE9BC,SAF8B,GAExBC,kBAAQC,KAAR,CAAcH,WAAd,EAA2B,EAAEI,MAAM,4BAAR,EAA3B,CAFwB;AAGhCC,YAHgC,WAGxBC,YAHwB,WAGVX,IAHU;AAAA;AAAA,aAKX,yBAAcM,GAAd,EAAmBR,EAAEC,OAAF,CAAUC,IAA7B,CALW;;AAAA;AAAA;AAAA;AAKlCA,UALkC;AAK5BU,YAL4B;AAAA;AAAA,aAMG,0BAAeZ,EAAEC,OAAF,CAAUC,IAAzB,EAA+BU,MAA/B,CANH;;AAAA;AAAA;AAAA;AAMlCV,UANkC;AAM5BU,YAN4B;AAMpBC,kBANoB;;;AAQpCb,QAAEc,MAAF,uBAAS,+DAAaC,MAAb,0BAAwB,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACAf,QAAEgB,SAAF,yBAAY,mEAAa,CAAb,yBAAgBC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAwC,EAAEC,OAAO,EAAT,EAAaC,QAAQ,EAArB,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAToC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAArC;;AAAA;AAAA;AAAA;AAAA;;AAYA,mBAAK,kCAAL;AAAA,gFAAyC,kBAAOnB,CAAP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACdP,cAAc,gCAAd,CADc;;AAAA;AAClCc,iBADkC;AAElCC,SAFkC,GAE5BC,kBAAQC,KAAR,CAAcH,WAAd,EAA2B,EAAEI,MAAM,gCAAR,EAA3B,CAF4B;AAGpCC,YAHoC,WAG5BC,YAH4B,WAGdX,IAHc;;;AAKxC,gCAAeF,EAAEC,OAAF,CAAUC,IAAzB;AALwC;AAAA,aAMf,yBAAcM,GAAd,EAAmBR,EAAEC,OAAF,CAAUC,IAA7B,CANe;;AAAA;AAAA;AAAA;AAMtCA,UANsC;AAMhCU,YANgC;AAAA;AAAA,aAOf,wBAAaZ,EAAEC,OAAF,CAAUC,IAAvB,EAA6BU,MAA7B,CAPe;;AAAA;AAAA;AAAA;AAOtCV,UAPsC;AAOhCU,YAPgC;AAAA;AAAA,aAQD,0BAAeZ,EAAEC,OAAF,CAAUC,IAAzB,EAA+BU,MAA/B,CARC;;AAAA;AAAA;AAAA;AAQtCV,UARsC;AAQhCU,YARgC;AAQxBC,kBARwB;;;AAUxCb,QAAEc,MAAF,yBAAS,iEAAaC,MAAb,0BAAwB,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACAf,QAAEgB,SAAF,yBAAY,mEAAa,CAAb,yBAAgBC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAwC,EAAEC,OAAO,GAAT,EAAcC,QAAQ,GAAtB,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAzC;;AAAA;AAAA;AAAA;AAAA;;AAcA,mBAAK,wCAAL;AAAA,iFAA+C,kBAAOnB,CAAP;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACpBP,cAAc,6BAAd,CADoB;;AAAA;AACxCc,iBADwC;AAExCC,SAFwC,GAElCC,kBAAQC,KAAR,CAAcH,WAAd,EAA2B,EAAEI,MAAM,6BAAR,EAA3B,CAFkC;AAG1CC,YAH0C,WAGlCC,YAHkC,WAGpBX,IAHoB;;;AAK9CF,QAAEC,OAAF,CAAUC,IAAV,CAAekB,MAAf,GAAwB,IAAxB;;AAEA,gCAAepB,EAAEC,OAAF,CAAUC,IAAzB;AAP8C;AAAA,aAQrB,yBAAcM,GAAd,EAAmBR,EAAEC,OAAF,CAAUC,IAA7B,CARqB;;AAAA;AAAA;AAAA;AAQ5CA,UAR4C;AAQtCU,YARsC;AAAA;AAAA,aASrB,wBAAaZ,EAAEC,OAAF,CAAUC,IAAvB,EAA6BU,MAA7B,CATqB;;AAAA;AAAA;AAAA;AAS5CV,UAT4C;AAStCU,YATsC;AAAA;AAAA,aAUP,0BAAeZ,EAAEC,OAAF,CAAUC,IAAzB,EAA+BU,MAA/B,CAVO;;AAAA;AAAA;AAAA;AAU5CV,UAV4C;AAUtCU,YAVsC;AAU9BC,kBAV8B;;;AAY9Cb,QAAEc,MAAF,yBAAS,iEAAaC,MAAb,0BAAwB,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACAf,QAAEc,MAAF,yBAAS,8GAAa,CAAb,4CAAgBO,MAAhB,oCAAuBC,OAAvB,CAA+B,KAA/B,qCAAwC,CAAC,CAAzC,sBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;;AAb8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA/C;;AAAA;AAAA;AAAA;AAAA","file":"07-run-spritesmith.js","sourcesContent":["import test from 'ava';\nimport postcss from 'postcss';\nimport _ from 'lodash';\nimport Promise from 'bluebird';\nimport fs from 'fs';\nimport { defaults, extractImages, prepareGroupBy, applyGroupBy, runSpritesmith } from '../lib/core';\n\nconst readFileAsync = Promise.promisify(fs.readFile);\n\ntest.beforeEach((t) => {\n\tt.context.opts = _.merge({ logger() {} }, defaults);\n});\n\ntest('should generate spritesheets', async (t) => {\n\tconst cssContents = await readFileAsync('./fixtures/basic/style.css');\n\tconst ast = postcss.parse(cssContents, { from: './fixtures/basic/style.css' });\n\tlet images, spritesheets, opts;\n\n\t[ opts, images ] = await extractImages(ast, t.context.opts);\n\t[ opts, images, spritesheets ] = await runSpritesmith(t.context.opts, images);\n\n\tt.truthy(spritesheets.length === 1);\n\tt.deepEqual(spritesheets[0].properties, { width: 50, height: 25 });\n});\n\ntest('should generate SVG spritesheets', async (t) => {\n\tconst cssContents = await readFileAsync('./fixtures/svg-basic/style.css');\n\tconst ast = postcss.parse(cssContents, { from: './fixtures/svg-basic/style.css' });\n\tlet images, spritesheets, opts;\n\n\tprepareGroupBy(t.context.opts);\n\t[ opts, images ] = await extractImages(ast, t.context.opts);\n\t[ opts, images ] = await applyGroupBy(t.context.opts, images);\n\t[ opts, images, spritesheets ] = await runSpritesmith(t.context.opts, images);\n\n\tt.truthy(spritesheets.length === 1);\n\tt.deepEqual(spritesheets[0].properties, { width: 962, height: 600 });\n});\n\ntest('should generate spritesheets by groups', async (t) => {\n\tconst cssContents = await readFileAsync('./fixtures/retina/style.css');\n\tconst ast = postcss.parse(cssContents, { from: './fixtures/retina/style.css' });\n\tlet images, spritesheets, opts;\n\n\tt.context.opts.retina = true;\n\n\tprepareGroupBy(t.context.opts);\n\t[ opts, images ] = await extractImages(ast, t.context.opts);\n\t[ opts, images ] = await applyGroupBy(t.context.opts, images);\n\t[ opts, images, spritesheets ] = await runSpritesmith(t.context.opts, images);\n\n\tt.truthy(spritesheets.length === 2);\n\tt.truthy(spritesheets[1].groups.indexOf('@2x') > -1);\n});\n"]}