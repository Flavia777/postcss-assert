{"version":3,"sources":["09-map-spritesheet-props.js"],"names":["readFileAsync","Promise","promisify","fs","readFile","test","beforeEach","t","context","opts","_","merge","logger","defaults","cssContents","ast","postcss","parse","from","images","spritesheets","spritePath","deepEqual","coords","x","y","height","width"],"mappings":"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","file":"09-map-spritesheet-props.js","sourcesContent":["import test from 'ava';\nimport postcss from 'postcss';\nimport _ from 'lodash';\nimport Promise from 'bluebird';\nimport fs from 'fs-extra';\nimport {\n\tdefaults,\n\textractImages,\n\trunSpritesmith,\n\tsaveSpritesheets,\n\tmapSpritesheetProps,\n\tprepareGroupBy,\n\tapplyGroupBy\n} from '../lib/core';\n\nconst readFileAsync = Promise.promisify(fs.readFile);\n\ntest.beforeEach((t) => {\n\tt.context.opts = _.merge({ logger() {} }, defaults);\n});\n\ntest('should add coords & spritePath to every image', async (t) => {\n\tconst cssContents = await readFileAsync('./fixtures/basic/style.css');\n\tconst ast = postcss.parse(cssContents, { from: './fixtures/basic/style.css' });\n\tlet images, spritesheets, opts;\n\n\tt.context.opts.spritePath = './build/basic';\n\n\t[ opts, images ] = await extractImages(ast, t.context.opts);\n\t[ opts, images, spritesheets ] = await runSpritesmith(t.context.opts, images);\n\t[ opts, images, spritesheets ] = await saveSpritesheets(t.context.opts, images, spritesheets);\n\t[ opts, images, spritesheets ] = await mapSpritesheetProps(t.context.opts, images, spritesheets);\n\n\tt.deepEqual(images[0].spritePath, 'build/basic/sprite.png');\n\tt.deepEqual(images[0].coords, { x: 0, y: 0, height: 25, width: 25 });\n});\n\ntest('should add coords & spritePath to every SVG image', async (t) => {\n\tconst cssContents = await readFileAsync('./fixtures/svg-basic/style.css');\n\tconst ast = postcss.parse(cssContents, { from: './fixtures/svg-basic/style.css' });\n\tlet images, spritesheets, opts;\n\n\tt.context.opts.spritePath = './build/svg-basic';\n\n\tprepareGroupBy(t.context.opts);\n\t[ opts, images ] = await extractImages(ast, t.context.opts);\n\t[ opts, images ] = await applyGroupBy(t.context.opts, images);\n\t[ opts, images, spritesheets ] = await runSpritesmith(t.context.opts, images);\n\t[ opts, images, spritesheets ] = await saveSpritesheets(t.context.opts, images, spritesheets);\n\t[ opts, images, spritesheets ] = await mapSpritesheetProps(t.context.opts, images, spritesheets);\n\n\tt.deepEqual(images[0].spritePath, 'build/svg-basic/sprite.svg');\n\tt.deepEqual(images[0].coords, { x: 0, y: 0, height: 600, width: 600 });\n});\n"]}