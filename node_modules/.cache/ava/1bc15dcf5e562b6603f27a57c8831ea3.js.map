{"version":3,"sources":["10-update-references.js"],"names":["readFileAsync","Promise","promisify","fs","readFile","test","beforeEach","t","context","opts","_","merge","logger","defaults","input","expected","ast","postcss","parse","from","images","spritesheets","root","spritePath","stylesheetPath","deepEqual","toString","hooks","onUpdateRule","rule","commentNode","image","backgroundColorDecl","decl","prop","value","insertAfter","last"],"mappings":"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","file":"10-update-references.js","sourcesContent":["import test from 'ava';\nimport postcss from 'postcss';\nimport _ from 'lodash';\nimport Promise from 'bluebird';\nimport fs from 'fs-extra';\nimport {\n\tdefaults,\n\textractImages,\n\tsetTokens,\n\trunSpritesmith,\n\tsaveSpritesheets,\n\tmapSpritesheetProps,\n\tupdateReferences,\n\tupdateRule\n} from '../lib/core';\n\nconst readFileAsync = Promise.promisify(fs.readFile);\n\ntest.beforeEach((t) => {\n\tt.context.opts = _.merge({ logger() {} }, defaults);\n});\n\ntest('should update CSS declarations', async (t) => {\n\tconst input = await readFileAsync('./fixtures/basic/style.css');\n\tconst expected = await readFileAsync('./expectations/basic/style.css', 'utf8');\n\tconst ast = postcss.parse(input, { from: './fixtures/basic/style.css' });\n\tlet images, spritesheets, opts, root;\n\n\tt.context.opts.spritePath = './build/basic';\n\tt.context.opts.stylesheetPath = './build/basic';\n\n\t[ opts, images ] = await extractImages(ast, t.context.opts);\n\t[ root, opts, images ] = await setTokens(ast, t.context.opts, images);\n\t[ opts, images, spritesheets ] = await runSpritesmith(t.context.opts, images);\n\t[ opts, images, spritesheets ] = await saveSpritesheets(t.context.opts, images, spritesheets);\n\t[ opts, images, spritesheets ] = await mapSpritesheetProps(t.context.opts, images, spritesheets);\n\t[ root, opts, images, spritesheets ] = await updateReferences(root, t.context.opts, images, spritesheets);\n\n\tt.deepEqual(root.toString(), expected);\n});\n\ntest('should update CSS declarations with relative paths', async (t) => {\n\tconst input = await readFileAsync('./fixtures/relative/style.css');\n\tconst expected = await readFileAsync('./expectations/relative/style.css', 'utf8');\n\tconst ast = postcss.parse(input, { from: './fixtures/relative/style.css' });\n\tlet images, spritesheets, opts, root;\n\n\tt.context.opts.spritePath = './build/relative';\n\n\t[ opts, images ] = await extractImages(ast, t.context.opts);\n\t[ root, opts, images ] = await setTokens(ast, t.context.opts, images);\n\t[ opts, images, spritesheets ] = await runSpritesmith(t.context.opts, images);\n\t[ opts, images, spritesheets ] = await saveSpritesheets(t.context.opts, images, spritesheets);\n\t[ opts, images, spritesheets ] = await mapSpritesheetProps(t.context.opts, images, spritesheets);\n\t[ root, opts, images, spritesheets ] = await updateReferences(root, t.context.opts, images, spritesheets);\n\n\tt.deepEqual(root.toString(), expected);\n});\n\ntest('should use function provided by onUpdateRule hook', async (t) => {\n\tconst input = await readFileAsync('./fixtures/basic/style.css');\n\tconst expected = await readFileAsync('./expectations/basic-on-update-rule-hook/style.css', 'utf8');\n\tconst ast = postcss.parse(input, { from: './fixtures/basic/style.css' });\n\tlet images, spritesheets, opts, root;\n\n\tt.context.opts.spritePath = './build/basic-on-update-rule-hook';\n\tt.context.opts.stylesheetPath = './build/basic-on-update-rule-hook';\n\tt.context.opts.hooks.onUpdateRule = (rule, commentNode, image) => {\n\t\tconst backgroundColorDecl = postcss.decl({\n\t\t\tprop: 'background-color',\n\t\t\tvalue: '#000'\n\t\t});\n\n\t\tupdateRule(rule, commentNode, image);\n\n\t\trule.insertAfter(rule.last, backgroundColorDecl);\n\t}\n\n\t[ opts, images ] = await extractImages(ast, t.context.opts);\n\t[ root, opts, images ] = await setTokens(ast, t.context.opts, images);\n\t[ opts, images, spritesheets ] = await runSpritesmith(t.context.opts, images);\n\t[ opts, images, spritesheets ] = await saveSpritesheets(t.context.opts, images, spritesheets);\n\t[ opts, images, spritesheets ] = await mapSpritesheetProps(t.context.opts, images, spritesheets);\n\t[ root, opts, images, spritesheets ] = await updateReferences(root, t.context.opts, images, spritesheets);\n\n\tt.deepEqual(root.toString(), expected);\n});\n"]}