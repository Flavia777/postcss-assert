{"version":3,"sources":["05-apply-group-by.js"],"names":["test","beforeEach","t","input","context","opts","_","merge","logger","defaults","ast","postcss","parse","from","images","retina","truthy","length","groups","indexOf","groupBy","push","image","url","Promise","reject","resolve","styleFilePath"],"mappings":"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","file":"05-apply-group-by.js","sourcesContent":["import test from 'ava';\nimport postcss from 'postcss';\nimport Promise from 'bluebird';\nimport _ from 'lodash';\nimport { defaults, prepareGroupBy, extractImages, applyGroupBy } from '../lib/core';\n\ntest.beforeEach((t) => {\n\tconst input = `\n\t\t.selector-a { background-image: url(circle@2x.png); }\n\t\t.selector-b { background: url(square@2x.png) no-repeat 0 0; }\n\t`;\n\n\tt.context.opts = _.merge({ logger() {} }, defaults);\n\tt.context.ast = postcss.parse(input, { from: '/tmp/test.css' });\n});\n\ntest('should use built-in retina grouping function', async (t) => {\n\tlet images, opts;\n\n\tt.context.opts.retina = true;\n\n\tprepareGroupBy(t.context.opts);\n\t[ opts, images ] = await extractImages(t.context.ast, t.context.opts);\n\t[ opts, images ] = await applyGroupBy(t.context.opts, images);\n\n\tt.truthy(images.length === 2);\n\tt.truthy(images[0].groups.indexOf('@2x') > -1);\n\tt.truthy(images[1].groups.indexOf('@2x') > -1);\n});\n\ntest('should use grouping functions provided by user', async (t) => {\n\tlet images, opts;\n\n\tt.context.opts.retina = true;\n\tt.context.opts.groupBy.push((image) => {\n\t\tif (image.url.indexOf('png') === -1) {\n\t\t\treturn Promise.reject();\n\t\t}\n\n\t\treturn Promise.resolve('png');\n\t});\n\n\tprepareGroupBy(t.context.opts);\n\n\t[ opts, images ] = await extractImages(t.context.ast, t.context.opts);\n\t[ opts, images ] = await applyGroupBy(t.context.opts, images);\n\n\tt.truthy(images[0].groups.indexOf('png') > -1);\n\tt.truthy(images[0].groups.indexOf('@2x') > -1);\n});\n\ntest('should use grouping functions by filename provided by user', async (t) => {\n\tlet images, opts;\n\n\tt.context.opts.retina = true;\n\tt.context.opts.groupBy.push((image) => {\n\t\tif (image.styleFilePath.indexOf('test.css') !== -1) {\n\t\t\treturn Promise.resolve('testing');\n\t\t}\n\n\t\treturn Promise.reject();\n\t});\n\n\tprepareGroupBy(t.context.opts);\n\n\t[ opts, images ] = await extractImages(t.context.ast, t.context.opts);\n\t[ opts, images ] = await applyGroupBy(t.context.opts, images);\n\n\tt.truthy(images[0].groups.indexOf('testing') > -1);\n});\n"]}