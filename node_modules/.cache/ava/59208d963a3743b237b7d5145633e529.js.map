{"version":3,"sources":["03-extract-images.js"],"names":["test","beforeEach","t","input","context","ast","postcss","parse","from","opts","logger","defaults","images","deepEqual","length","retina","ratio","basePath","truthy","path","indexOf"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEAA,cAAKC,UAAL,CAAgB,UAACC,CAAD,EAAO;AACtB,KAAMC,0QAAN;;AAOAD,GAAEE,OAAF,CAAUC,GAAV,GAAgBC,kBAAQC,KAAR,CAAcJ,KAAd,EAAqB,EAAEK,MAAM,eAAR,EAArB,CAAhB;AACAN,GAAEE,OAAF,CAAUK,IAAV,GAAiB,sBAAc;AAAEC,QAAF,oBAAW,CAAE;AAAb,EAAd,EAA+BC,cAA/B,CAAjB;AACA,CAVD;;AAYA,mBAAK,uCAAL;AAAA,+EAA8C,iBAAOT,CAAP;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACd,yBAAcA,EAAEE,OAAF,CAAUC,GAAxB,EAA6BH,EAAEE,OAAF,CAAUK,IAAvC,CADc;;AAAA;AAAA;AAAA;AACrCA,UADqC;AAC/BG,YAD+B;;;AAG7CV,QAAEW,SAAF,uBAAY,yCAAOC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,UAA2B,CAA3B;;AAH6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA9C;;AAAA;AAAA;AAAA;AAAA;;AAMA,mBAAK,6BAAL;AAAA,gFAAoC,kBAAOZ,CAAP;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnCA,QAAEE,OAAF,CAAUK,IAAV,CAAeM,MAAf,GAAwB,IAAxB;;AADmC;AAAA,aAGJ,yBAAcb,EAAEE,OAAF,CAAUC,GAAxB,EAA6BH,EAAEE,OAAF,CAAUK,IAAvC,CAHI;;AAAA;AAAA;AAAA;AAG3BA,UAH2B;AAGrBG,YAHqB;;;AAKnCV,QAAEW,SAAF,yBAAY,6DAAO,CAAP,yBAAUG,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,UAA6B,CAA7B;;AALmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAApC;;AAAA;AAAA;AAAA;AAAA;;AAQA,mBAAK,wCAAL;AAAA,gFAA+C,kBAAOd,CAAP;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC9CA,QAAEE,OAAF,CAAUK,IAAV,CAAeQ,QAAf,GAA0B,UAA1B;;AAD8C;AAAA,aAGf,yBAAcf,EAAEE,OAAF,CAAUC,GAAxB,EAA6BH,EAAEE,OAAF,CAAUK,IAAvC,CAHe;;AAAA;AAAA;AAAA;AAGtCA,UAHsC;AAGhCG,YAHgC;;;AAK9CV,QAAEgB,MAAF,yBAAS,wGAAO,CAAP,4CAAUC,IAAV,oCAAeC,OAAf,CAAuB,QAAvB,qCAAmC,CAAC,CAApC,sBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;;AAL8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA/C;;AAAA;AAAA;AAAA;AAAA","file":"03-extract-images.js","sourcesContent":["import test from 'ava';\nimport postcss from 'postcss';\nimport { extractImages, defaults } from '../lib/core';\n\ntest.beforeEach((t) => {\n\tconst input = `\n\t\t.selector-a { background-image: url(circle.png); }\n\t\t.selector-b { background: url(square.png) no-repeat 0 0; }\n\t\t.selector-c { background: url(square@2x.png) no-repeat 0 0; }\n\t\t.selector-d { background: url(/circle.png) no-repeat 0 0; }\n\t`;\n\n\tt.context.ast = postcss.parse(input, { from: '/tmp/test.css' });\n\tt.context.opts = Object.assign({ logger() {} }, defaults);\n});\n\ntest('should convert rules to image objects', async (t) => {\n\tconst [ opts, images ] = await extractImages(t.context.ast, t.context.opts);\n\n\tt.deepEqual(images.length, 4);\n});\n\ntest('should handle retina images', async (t) => {\n\tt.context.opts.retina = true;\n\n\tconst [ opts, images ] = await extractImages(t.context.ast, t.context.opts);\n\n\tt.deepEqual(images[2].ratio, 2);\n});\n\ntest('should handle images with absolute url', async (t) => {\n\tt.context.opts.basePath = './images';\n\n\tconst [ opts, images ] = await extractImages(t.context.ast, t.context.opts);\n\n\tt.truthy(images[3].path.indexOf('images') > -1);\n});\n"]}