{"version":3,"sources":["06-set-tokens.js"],"names":["input","root","postcss","parse","from","opts","_","merge","logger","defaults","images","run","t","expected","deepEqual","toString"],"mappings":";;;;;;;;;;;;;;;;;+EAKA,iBAAmBA,KAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKC,UADL,GACYC,kBAAQC,KAAR,CAAcH,KAAd,EAAqB,EAAEI,MAAM,eAAR,EAArB,CADZ;AAEKC,UAFL,GAEYC,iBAAEC,KAAF,CAAQ;AAAEC,aAAF,oBAAW,CAAE;AAAb,OAAR,EAAyBC,cAAzB,CAFZ;AAGKC,YAHL;AAAA;AAAA,aAK0B,yBAAcT,IAAd,EAAoBI,IAApB,CAL1B;;AAAA;AAAA;AAAA;AAKGA,UALH;AAKSK,YALT;AAAA;AAAA,aAMgC,qBAAUT,IAAV,EAAgBI,IAAhB,EAAsBK,MAAtB,CANhC;;AAAA;AAAA;AAAA;AAMGT,UANH;AAMSI,UANT;AAMeK,YANf;AAAA,uCAQQT,IARR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeU,G;;;;;AALf;;;;AACA;;;;AACA;;;;AACA;;;;AAaA,mBAAK,4DAAL;AAAA,gFAAmE,kBAAOC,CAAP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5DZ,WAD4D;AAK5Da,cAL4D;AAAA;AAAA,aAS/CF,IAAIX,KAAJ,CAT+C;;AAAA;AAS5DC,UAT4D;;;AAWlEW,QAAEE,SAAF,uBAAY,8CAAKC,QAAL,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA6BF,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAnE;;AAAA;AAAA;AAAA;AAAA;;AAcA,mBAAK,0FAAL;AAAA,gFAAiG,kBAAOD,CAAP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1FZ,WAD0F;AAK1Fa,cAL0F;AAAA;AAAA,aAS7EF,IAAIX,KAAJ,CAT6E;;AAAA;AAS1FC,UAT0F;;;AAWhGW,QAAEE,SAAF,yBAAY,+CAAKC,QAAL,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA6BF,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXgG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjG;;AAAA;AAAA;AAAA;AAAA","file":"06-set-tokens.js","sourcesContent":["import test from 'ava';\nimport postcss from 'postcss';\nimport _ from 'lodash';\nimport { defaults, extractImages, setTokens } from '../lib/core';\n\nasync function run(input) {\n\tlet root = postcss.parse(input, { from: '/tmp/test.css' });\n\tlet opts = _.merge({ logger() {} }, defaults);\n\tlet images;\n\n\t[ opts, images ] = await extractImages(root, opts);\n\t[ root, opts, images ] = await setTokens(root, opts, images);\n\n\treturn root;\n}\n\ntest('should replace background declarations with comment tokens', async (t) => {\n\tconst input = `\n\t\t.selector-a { background-image: url(circle.png); }\n\t\t.selector-b { background: url(square.png) no-repeat 0 0; }\n\t`;\n\tconst expected = `\n\t\t.selector-a { /* @replace|circle.png */ }\n\t\t.selector-b { /* @replace|square.png */ }\n\t`;\n\tconst root = await run(input);\n\n\tt.deepEqual(root.toString(), expected);\n});\n\ntest('should remove any background-repeat, background-size or background-position declarations', async (t) => {\n\tconst input = `\n\t\t.selector-a { background-image: url(circle.png); background-repeat: no-repeat; background-position: center center; }\n\t\t.selector-b { background: url(square.png) no-repeat 0 0; background-size: 100% 100%; }\n\t`;\n\tconst expected = `\n\t\t.selector-a { /* @replace|circle.png */ }\n\t\t.selector-b { /* @replace|square.png */ }\n\t`;\n\tconst root = await run(input);\n\n\tt.deepEqual(root.toString(), expected);\n});\n"]}