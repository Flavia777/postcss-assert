{"version":3,"sources":["04-apply-filter-by.js"],"names":["test","beforeEach","t","context","opts","_","merge","logger","defaults","input","ast","postcss","parse","from","images","truthy","length","filterBy","push","image","url","indexOf","Promise","reject","resolve","styleFilePath"],"mappings":"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","file":"04-apply-filter-by.js","sourcesContent":["import test from 'ava';\nimport postcss from 'postcss';\nimport Promise from 'bluebird';\nimport _ from 'lodash';\nimport { defaults, prepareFilterBy, extractImages, applyFilterBy } from '../lib/core';\n\ntest.beforeEach(async (t) => {\n\tt.context.opts = _.merge({ logger() {} }, defaults);\n\n\tconst input = `\n\t\t.selector-a { background-image: url(circle.png); }\n\t\t.selector-b { background: url(square.png) no-repeat 0 0; }\n\t`;\n\tconst ast = postcss.parse(input, { from: '/tmp/test.css' });\n\tconst [ opts, images ] = await extractImages(ast, t.context.opts);\n\n\tt.context.images = images;\n\tt.context.ast = ast;\n});\n\ntest('should use built-in filter for non existing files', async (t) => {\n\tprepareFilterBy(t.context.opts);\n\n\tconst [ opts, images ] = await applyFilterBy(t.context.opts, t.context.images);\n\n\tt.truthy(images.length === 0);\n});\n\ntest('should use filters provided by user', async (t) => {\n\tt.context.opts.filterBy.push((image) => {\n\t\tif (image.url.indexOf('png') === -1) {\n\t\t\treturn Promise.reject();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t});\n\n\tt.context.opts.filterBy.push((image) => {\n\t\tif (image.url.indexOf('circle') > -1) {\n\t\t\treturn Promise.reject();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t});\n\n\tconst [ opts, images ] = await applyFilterBy(t.context.opts, t.context.images);\n\n\tt.truthy(images.length === 1);\n\tt.truthy(images[0].url.indexOf('square') > -1);\n});\n\ntest('should use filters by filename provided by user', async (t) => {\n\tt.context.opts.filterBy.push((image) => {\n\t\tif (image.styleFilePath.indexOf('test.css') !== -1) {\n\t\t\treturn Promise.reject();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t});\n\n\tconst [ opts, images ] = await applyFilterBy(t.context.opts, t.context.images);\n\n\tt.truthy(images.length === 0);\n});\n"]}