'use strict';

var _index = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/regenerator/index.js');

var _index2 = _interopRequireDefault(_index);

var _slicedToArray2 = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/helpers/slicedToArray.js');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('/Users/zhangqian/Documents/flavia/postcss-assert/node_modules/babel-runtime/core-js/object/assign.js');

var _assign2 = _interopRequireDefault(_assign);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _core = require('../lib/core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_ava2.default.beforeEach(function (t) {
	var input = '\n\t\t.selector-a { background-image: url(circle.png); }\n\t\t.selector-b { background: url(square.png) no-repeat 0 0; }\n\t\t.selector-c { background: url(square@2x.png) no-repeat 0 0; }\n\t\t.selector-d { background: url(/circle.png) no-repeat 0 0; }\n\t';

	t.context.ast = _postcss2.default.parse(input, { from: '/tmp/test.css' });
	t.context.opts = (0, _assign2.default)({
		logger: function logger() {}
	}, _core.defaults);
});

(0, _ava2.default)('should convert rules to image objects', function () {
	var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee(t) {
		var _rec = new _powerAssertRecorder();

		var _ref2, _ref3, opts, images;

		return _index2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						_context.next = 2;
						return (0, _core.extractImages)(t.context.ast, t.context.opts);

					case 2:
						_ref2 = _context.sent;
						_ref3 = (0, _slicedToArray3.default)(_ref2, 2);
						opts = _ref3[0];
						images = _ref3[1];


						t.deepEqual(_rec._expr(_rec._capt(_rec._capt(images, 'arguments/0/object').length, 'arguments/0'), {
							content: 't.deepEqual(images.length, 4)',
							filepath: 'test/03-extract-images.js',
							line: 20,
							async: true
						}), 4);

					case 7:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, undefined);
	}));

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('should handle retina images', function () {
	var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee2(t) {
		var _rec2 = new _powerAssertRecorder();

		var _ref5, _ref6, opts, images;

		return _index2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						t.context.opts.retina = true;

						_context2.next = 3;
						return (0, _core.extractImages)(t.context.ast, t.context.opts);

					case 3:
						_ref5 = _context2.sent;
						_ref6 = (0, _slicedToArray3.default)(_ref5, 2);
						opts = _ref6[0];
						images = _ref6[1];


						t.deepEqual(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(images, 'arguments/0/object/object')[2], 'arguments/0/object').ratio, 'arguments/0'), {
							content: 't.deepEqual(images[2].ratio, 2)',
							filepath: 'test/03-extract-images.js',
							line: 28,
							async: true
						}), 2);

					case 8:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, undefined);
	}));

	return function (_x2) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('should handle images with absolute url', function () {
	var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee3(t) {
		var _rec3 = new _powerAssertRecorder();

		var _ref8, _ref9, opts, images;

		return _index2.default.wrap(function _callee3$(_context3) {
			while (1) {
				switch (_context3.prev = _context3.next) {
					case 0:
						t.context.opts.basePath = './images';

						_context3.next = 3;
						return (0, _core.extractImages)(t.context.ast, t.context.opts);

					case 3:
						_ref8 = _context3.sent;
						_ref9 = (0, _slicedToArray3.default)(_ref8, 2);
						opts = _ref9[0];
						images = _ref9[1];


						t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt(images, 'arguments/0/left/callee/object/object/object')[3], 'arguments/0/left/callee/object/object').path, 'arguments/0/left/callee/object').indexOf('images'), 'arguments/0/left') > _rec3._capt(-1, 'arguments/0/right'), 'arguments/0'), {
							content: 't.truthy(images[3].path.indexOf(\'images\') > -1)',
							filepath: 'test/03-extract-images.js',
							line: 36,
							async: true
						}));

					case 8:
					case 'end':
						return _context3.stop();
				}
			}
		}, _callee3, undefined);
	}));

	return function (_x3) {
		return _ref7.apply(this, arguments);
	};
}());
//# sourceMappingURL=../node_modules/.cache/ava/59208d963a3743b237b7d5145633e529.js.map